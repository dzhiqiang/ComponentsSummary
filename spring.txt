
1，什么是 Spring 框架?
Spring 是一种轻量级开发框架，旨在提高开发人员的开发效率以及系统的可维护性。
Spring 官网列出的 Spring 的 6 个特征:
	核心技术 ：依赖注入(DI)，AOP，事件(events)，资源，i18n，验证，数据绑定，类型转换，SpEL。
	测试 ：模拟对象，TestContext框架，Spring MVC 测试，WebTestClient。
	数据访问 ：事务，DAO支持，JDBC，ORM，编组XML。
	Web支持 : Spring MVC和Spring WebFlux Web框架。
	集成 ：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存。
	语言 ：Kotlin，Groovy，动态语言。
2，列举一些重要的Spring模块？
Spring Core： 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IOC 依赖注入功能。
Spring Aspects： 该模块为与AspectJ的集成提供支持。
Spring AOP ：提供了面向方面的编程实现。
Spring JDBC : Java数据库连接。
Spring JMS ：Java消息服务。
Spring ORM : 用于支持Hibernate等ORM工具。
Spring Web : 为创建Web应用程序提供支持。
Spring Test : 提供了对 JUnit 和 TestNG 测试的支持。
3，谈谈自己对于 Spring IoC 和 AOP 的理解
IoC：IoC（Inverse of Control:控制反转）是一种设计思想，就是 将原本在程序中手动创建对象的控制权，交由Spring框架来管理。  IoC 在其他语言中也有应用，并非 Spirng 特有。 IoC 容器是 Spring 用来实现 IoC 的载体，  IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。
将对象之间的相互依赖关系交给 IOC 容器来管理，并由 IOC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。  IOC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。 在实际项目中一个 Service 类可能有几百甚至上千个类作为它的底层，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IOC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。
Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。
AOP：AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。Spring AOP就是基于动态代理的，如果要代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候Spring AOP会使用Cglib ，这时候Spring AOP会使用 Cglib 生成一个被代理对象的子类来作为代理
当然你也可以使用 AspectJ ,Spring AOP 已经集成了AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。
使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样大大简化了代码量。我们需要增加新功能时也方便，这样也提高了系统扩展性。日志功能、事务管理等等场景都用到了 AOP 。
4，Spring AOP 和 AspectJ AOP 有什么区别？
Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。 Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。
Spring AOP 已经集成了 AspectJ  ，AspectJ  应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ  相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，
如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比Spring AOP 快很多。
5，Spring 中的 bean 的作用域有哪些?
singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。
prototype : 每次请求都会创建一个新的 bean 实例。
request : 每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效。
session : 每一次HTTP请求都会产生一个新的 bean，该bean仅在当前 HTTP session 内有效。
global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话
6，Spring 中的单例 bean 的线程安全问题了解吗？
大部分时候我们并没有在系统中使用多线程，所以很少有人会关注这个问题。单例 bean 存在线程问题，主要是因为当多个线程操作同一个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。
常见的有两种解决办法：
	1）在Bean对象中尽量避免定义可变的成员变量（不太现实）。
	2）在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在 ThreadLocal 中（推荐的一种方式）。
7，Spring 中的 bean 生命周期?
	1）Bean 容器找到配置文件中 Spring Bean 的定义。
	2）Bean 容器利用 Java Reflection API 创建一个Bean的实例。
	3）如果涉及到一些属性值 利用 set()方法设置一些属性值。
	4）如果 Bean 实现了 BeanNameAware 接口，调用 setBeanName()方法，传入Bean的名字。
	5）如果 Bean 实现了 BeanClassLoaderAware 接口，调用 setBeanClassLoader()方法，传入 ClassLoader对象的实例。
	6）如果Bean实现了 BeanFactoryAware 接口，调用 setBeanClassLoader()方法，传入 ClassLoade r对象的实例。
	7）与上面的类似，如果实现了其他 *.Aware接口，就调用相应的方法。
	8）如果有和加载这个 Bean 的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessBeforeInitialization() 方法
	9）如果Bean实现了InitializingBean接口，执行afterPropertiesSet()方法。
	10）如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。
	11）如果有和加载这个 Bean的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessAfterInitialization() 方法
	12）当要销毁 Bean 的时候，如果 Bean 实现了 DisposableBean 接口，执行 destroy() 方法。
	13）当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。
8，SpringMVC处理过程
	1）request请求url，DispatcherServlet接受用户的请求和响应
	2）DispatcherServlet根据请求信息，找到对应的handler
	3）对应的handler(也就是常说的Controller)后，开始由HandlerAdapter适配器处理
	4）HandlerAdapter会根据Handler来调用真正的处理器开始处理请求，并处理相应的业务逻辑。
	5）处理器处理完业务后，会返回一个ModelAndView对象，Model是返回数据对象，view是逻辑上的view
	6）viewResolver会根据逻辑view查找实际的View
	7）DispatcherServlet把返回的Model传给View
	8）把view返回给浏览器
9，Spring用到了哪些设计模式
	1）工厂设计模式：spring使用工厂模式通过BeanFactory,ApplicationContext创建bean对象
	2）代理设计模式：Spring AOP功能的实现
	3）单例设计模式，Spring的bean默认是单例的
	4）模板方法模式：Spring中jdbcTemplate,hiberhateTemplate等以Template结尾的对数据库操作的类，他们使用了模板方法
	5）适配器模式：SpringMVC中也是用到了适配器模式适配Controller
10,spring管理实务的方式有几种
	1）编程式实务，在代码中硬编码
	2）声明式实务，在配置文件配置，分为2种，在xml中配置，基于注解的方式声明式事务
11，Spring 事务中哪几种事务传播行为?
	支持事务的情况
	1）REQUIRED：如果当前存在事务则加入该事务，如果没事务创建一个事务
	2）SUPPORTS：如果当前存在事务则加入该事务，如果没事务也不会创建事务
	3）MANDATORY：如果当前存在事务则加入该事务，如果没有事务则抛出异常
	不支持当前事务的情况：
	1）REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起
	2）NOT_SUPPORTED：已非事务运行，如果当前存在事务则挂起
	3）NEVER：以非事务运行，如果当前存在事务，则报错
	其他情况
	NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行，如果当前没有事务，则该值等价于REQUIRED.
	




