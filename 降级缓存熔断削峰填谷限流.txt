服务降级
一：降级的场景
1：牺牲用户体验
为了减少对「冷数据」的获取，禁用列表的翻页功能。
为了放缓流量进入的速率，增加验证码机制。
为了减少“大查询”浪费过多的资源，提高筛选条件要求（禁用模糊查询、部分条件必选等）。
2：牺牲功能完整性
还有一些功能是「防御性」的，如果愿意冒险“裸奔”一段时间也会带来可观的资源节约。
比如通过临时关闭「风控」、取消部分「条件是否满足」的判断（如，将积分商品添加到购物车时判断积分够不够）等操作，减少这类「验证」动作以释放更多的资源。
3：牺牲时效性
如果在特殊时期，能够临时降低对时效性的要求（3 秒内生效变成 30 秒生效），也是一个有不错收益的方案。
比如原先在商品页会显示当前还剩多少个库存，现在可以调整成固定显示「有货」。
以及将一些原本就是异步进行的操作，处理效率放缓，甚至暂缓一段时间。如，送积分、送券等等。
二：降级怎么做
主要分为两个环节：定级定序和降级实现。
定级定序
确定每个功能的重要程度，他决定了什么情况下可以抛弃它以保证剩下的功能可用。
降级实现
首先要制定触发机制。这同熔断、限流一样，什么时候该触发「降级」这个动作也需要依赖提前制定的一些策略。这部分内容和前面两篇（熔断、限流）类似，无非是接口的超时率、错误率，或者系统的资源耗用率等，这里就不重复展开了。





